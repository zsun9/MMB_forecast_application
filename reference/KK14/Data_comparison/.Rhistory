"A084RC1Q027SBEA", #"W014RC1Q027SBEA" ,
"W011RC1Q027SBEA" ,"W020RC1Q027SBEA" ,"B232RC1Q027SBEA", "W006RC1Q027SBEA",
"W780RC1Q027SBEA","W009RC1Q027SBEA","B097RC1Q027SBEA" , "B096RC1Q027SBEA", "A091RC1Q027SBEA")
DataNameVec <- c("PCND" , "PCESV" ,
"GPDI" , "PCDG", "GovConExp" , "GovGrossInv" , "GovNetPurNPAss" , "GovConsFixCap" ,
"CSI","EC", "IT", "SIT", "PRI" ,"W" ,
"rentalinc", "CPROFIT",
"interestinc"  ##
,"CT", "PT" ,"popindex" ,
"deflator" ,
"CurTransPmt" ,
"CurTransRpt" , "CapTransPmt" ,"CapTransRpt","CurTaxRpt",
"ConGovSocIns","IncRcptAss","CurSurpGovEntp" , "subsidies" , "IntPmt")
# cater for unit difference!! Everything should be in Billions!
# below vector is of other units
InMillions <- c("BOGZ1FA086130003Q")
check_vec <- cbind("name" =DataNameVec, "code" =DataCodeVec  )
if (gen_data ==1){
# data retrival
for (iii in 1:length(DataCodeVec)){
CodeName= DataCodeVec[iii]
# raw data retrival from ALFRED
tmp.vindates<- as.Date(fredr_series_vintagedates(series_id = CodeName)[[1]])
closest_date <- clost_vin_search(tmp.vindates, ref.vin.date )
series.data <- as.data.frame(fredr_series_observations(series_id = CodeName, frequency = "q", vintage_dates = closest_date))
series.data$date <- as.Date(series.data$date)
# Indexation of population and nominalization of deflator
if (CodeName == "CNP16OV") {
series.data[, "value"] = series.data[, "value"]/series.data[series.data$date == "2005-10-01","value"]
} else if ( CodeName == "GDPCTPI") {
series.data[, "value"] = series.data[, "value"]*100/series.data[series.data$date == "2005-10-01","value"]
} else {}
# change units to billion
if (CodeName == "BOGZ1FA086130003Q") {
series.data[, "value"] =  series.data[, "value"]/1000
}
# renaming
series.data = series.data[, c("date", "value")]
names(series.data)[names(series.data) == "value"] <- DataNameVec[iii]
series.data = series.data[,!(names(series.data) %in% "series_id")]
# append to joint dataframe
if (iii==1 ) {
joinseries = series.data
} else {
joinseries=inner_join(joinseries, series.data, by = "date", copy = FALSE)
}
}
save(joinseries, file = "joinseries.RData")
} else {
load("joinseries.RData")
}
if (trytry == 1) {
series.data6 <- as.data.frame(read_excel("CSI_tab3_2_ln11.xls",sheet = "Tabelle1"))
joinseries$CSI = as.vector(series.data6[,1])  # improves
series.data6 <- as.data.frame(read_excel("PT_tab3_3.xls",sheet = "Tabelle1"))
joinseries$PT = as.vector(series.data6[,1])  #improves
#series.data6 <- as.data.frame(read_excel("table3_2_line_7.xls",sheet = "Tabelle1"))
#joinseries$CT = as.vector(series.data6[,1])  # not improve
series.data6 <- as.data.frame(read_excel("subsidies_tab3_2_ln32.xls",sheet = "Tabelle1"))
joinseries$subsidies = as.vector(series.data6[,1])
}
series.data6
series.data6 <- as.data.frame(read_excel("CSI_tab3_2_ln11.xls",sheet = "Tabelle1"))
series.data6
series.data6 <- as.data.frame(read_excel("PT_tab3_3.xls",sheet = "Tabelle1"))
series.data6
series.data6 <- as.data.frame(read_excel("subsidies_tab3_2_ln32.xls",sheet = "Tabelle1"))
joinseries$subsidies = as.vector(series.data6[,1])
# Construct i_obs
PriInv =(joinseries$GPDI+joinseries$PCDG)/(joinseries$popindex*joinseries$deflator)
joinseries = cbind(joinseries, "PriInv" = PriInv , "I_obs" = log(PriInv))
I_obs_tb = cbind.data.frame("date" = joinseries$date, "I_obs" =joinseries$I_obs)
I_obs_tb[-1,2] = diff(I_obs_tb[,2])
I_obs_tb = betweendates(DATE1,DATE2,I_obs_tb)
I_obs_tb[,2] = (I_obs_tb[,2] - mean(I_obs_tb[,2]))
# Construct g_obs (government expenditure)
govexp = ((joinseries$GovConExp + joinseries$GovGrossInv + joinseries$GovNetPurNPAss - joinseries$GovConsFixCap)/
(joinseries$popindex*joinseries$deflator))
joinseries = cbind(joinseries, "govexp" = govexp , "g_obs" = log(govexp))
g_obs_tb = cbind.data.frame("date" = joinseries$date, "g_obs" =joinseries$g_obs)
g_obs_tb[-1,2] = diff(g_obs_tb[,2])
g_obs_tb = betweendates(DATE1,DATE2,g_obs_tb)
g_obs_tb[,2] = (g_obs_tb[,2] - mean(g_obs_tb[,2]))
# get capital income
series.data.CI = joinseries$rentalinc+joinseries$CPROFIT+joinseries$interestinc+joinseries$PRI/2
joinseries = cbind(joinseries, "CI" = series.data.CI)
# calculate labor tax rate
tau_w = ((joinseries$IT+joinseries$SIT)/(joinseries$W+joinseries$PRI/2+joinseries$CI))*((joinseries$W+joinseries$PRI/2)/(joinseries$EC+joinseries$PRI/2))+joinseries$CSI/(joinseries$EC+joinseries$PRI/2)
joinseries = cbind(joinseries ,"tau_w" =0.9*tau_w , "ln_tau_w" =log(0.9*tau_w))
# calculate capital tax rate
tau_k = (joinseries$IT/(joinseries$W + joinseries$PRI/2 + joinseries$CI))*(joinseries$CI/(joinseries$CI + joinseries$PT)) + (joinseries$CT + joinseries$PT)/(joinseries$CI + joinseries$PT)
joinseries = cbind(joinseries ,"tau_k" =tau_k*0.74,"ln_tau_k"=log(tau_k*0.74) )
# extract taxrate observables
tax_rate_table = joinseries[,c("date","ln_tau_w","ln_tau_k")]
tax_rate_table = betweendates(DATE1,DATE2,tax_rate_table)  #truncation of data series between DATE1 and DATE2
# demeaning the log tax rates (they are the observations in model)
tax_rate_table[,"ln_tau_w"] = tax_rate_table[,"ln_tau_w"] - mean(tax_rate_table[,"ln_tau_w"] )
tax_rate_table[,"ln_tau_k"] = tax_rate_table[,"ln_tau_k"] - mean(tax_rate_table[,"ln_tau_k"] )
# calculate tax_obs (gov tax revenue)
govtaxrev = (joinseries$tau_w*(joinseries$EC + joinseries$PRI/2) + joinseries$tau_k*(joinseries$CI + joinseries$PT))/(joinseries$popindex*joinseries$deflator)
ln_taxrev = log(govtaxrev)
joinseries = cbind(joinseries , "govtaxrev" = govtaxrev,  "tax_obs" =ln_taxrev )
tax_obs = joinseries[, c("date" , "tax_obs")]
tax_obs[-1,2] = diff(tax_obs[,2])
tax_obs = betweendates(DATE1,DATE2,tax_obs) #truncation of data series between DATE1 and DATE2
tax_obs[,2] = (tax_obs[,2] - mean(tax_obs[,2]))
# calculate government transfers
govtrans = (joinseries$CurTransPmt- joinseries$CurTransRpt) +  # net current transfers
(joinseries$CapTransPmt -joinseries$CapTransRpt) +  # net capital transfers
joinseries$subsidies - # sibsidies
(joinseries$CurTaxRpt + joinseries$ConGovSocIns + joinseries$IncRcptAss + joinseries$CurSurpGovEntp  - joinseries$govtaxrev) # tax residual
joinseries = cbind(joinseries , "govtrans" = govtrans , "ln_real_pc_govtrans" = log(govtrans/(joinseries$popindex*joinseries$deflator)))
# Then calculates b_obs (government debts)
# (this is a problematic section)
govdebts = ((joinseries$govexp + joinseries$govtrans - joinseries$govtaxrev + joinseries$IntPmt)/
(joinseries$popindex*joinseries$deflator))
joinseries = cbind(joinseries , "govdebts" = govdebts, "b_obs" = log(govdebts))
b_obs_tb = joinseries[, c("date" , "govdebts")]
#b_obs_tb[, "govdebts"] = b_obs_tb[, "govdebts"] -b_obs_tb[1, "govdebts"] + 263944*1000000
b_obs_tb[, "govdebts"] = log(b_obs_tb[, "govdebts"] )
b_obs_tb[-1,2] = diff(b_obs_tb[,2])
b_obs_tb = betweendates(DATE1,DATE2,b_obs_tb) #truncation of data series between DATE1 and DATE2
b_obs_tb[,2] = (b_obs_tb[,2] - mean(b_obs_tb[,2]))
## --- Housekeeping-------------
rm(list = ls())
gen_data =1  # if 1, retrieve data from alfred
trytry = 1
# install.packages(c("fredr","writexl","dplyr","readxl","R.matlab"))
library(fredr)
library(writexl)
library(dplyr)
library(readxl)
library(R.matlab)
scriptloc = dirname(rstudioapi::getSourceEditorContext()$path)
fredr_set_key("52191461124b452b055bc68a63d07928")  #set alfred access key
ref.vin.date <- as.Date("2012-10-10")  # vintage date as reference
source("UtilityFunctions.R")   # self define functions
DATE1 <- as.Date("1983-01-01") # 1983Q1
DATE2 <- as.Date("2008-08-30")  # 2008Q3
datalist <- list() #initiate list to store data
## -- retrieve data from ALFRED -----------
# Define vector of series to be retrieved and their respective column names
DataCodeVec <- c("PCND"  , "PCESV" ,
"GPDI", "PCDG" , "A957RC1Q027SBEA" , "A787RC1Q027SBEA" , "AD08RC1Q027SBEA" , "A918RC1Q027SBEA",
"W780RC1Q027SBEA","COE", "A074RC1Q027SBEA", "W071RC1Q027SBEA", "PROPINC", "WASCUR",
"RENTIN", "CPROFIT",
"W255RC1Q027SBEA", #"BOGZ1FA086130003Q"
"B075RC1Q027SBEA", "B249RC1Q027SBEA", "CNP16OV",
"GDPCTPI" ,
"W014RC1Q027SBEA", #"W014RC1Q027SBEA" ,
"W011RC1Q027SBEA" ,"W020RC1Q027SBEA" ,"B232RC1Q027SBEA", "W006RC1Q027SBEA",
"W780RC1Q027SBEA","W009RC1Q027SBEA","B097RC1Q027SBEA" , "B096RC1Q027SBEA", "A091RC1Q027SBEA")
DataNameVec <- c("PCND" , "PCESV" ,
"GPDI" , "PCDG", "GovConExp" , "GovGrossInv" , "GovNetPurNPAss" , "GovConsFixCap" ,
"CSI","EC", "IT", "SIT", "PRI" ,"W" ,
"rentalinc", "CPROFIT",
"interestinc"  ##
,"CT", "PT" ,"popindex" ,
"deflator" ,
"CurTransPmt" , ##
"CurTransRpt" , "CapTransPmt" ,"CapTransRpt","CurTaxRpt",
"ConGovSocIns","IncRcptAss","CurSurpGovEntp" , "subsidies" , "IntPmt")
# cater for unit difference!! Everything should be in Billions!
# below vector is of other units
InMillions <- c("BOGZ1FA086130003Q")
check_vec <- cbind("name" =DataNameVec, "code" =DataCodeVec  )
if (gen_data ==1){
# data retrival
for (iii in 1:length(DataCodeVec)){
CodeName= DataCodeVec[iii]
# raw data retrival from ALFRED
tmp.vindates<- as.Date(fredr_series_vintagedates(series_id = CodeName)[[1]])
closest_date <- clost_vin_search(tmp.vindates, ref.vin.date )
series.data <- as.data.frame(fredr_series_observations(series_id = CodeName, frequency = "q", vintage_dates = closest_date))
series.data$date <- as.Date(series.data$date)
# Indexation of population and nominalization of deflator
if (CodeName == "CNP16OV") {
series.data[, "value"] = series.data[, "value"]/series.data[series.data$date == "2005-10-01","value"]
} else if ( CodeName == "GDPCTPI") {
series.data[, "value"] = series.data[, "value"]*100/series.data[series.data$date == "2005-10-01","value"]
} else {}
# change units to billion
if (CodeName == "BOGZ1FA086130003Q") {
series.data[, "value"] =  series.data[, "value"]/1000
}
# renaming
series.data = series.data[, c("date", "value")]
names(series.data)[names(series.data) == "value"] <- DataNameVec[iii]
series.data = series.data[,!(names(series.data) %in% "series_id")]
# append to joint dataframe
if (iii==1 ) {
joinseries = series.data
} else {
joinseries=inner_join(joinseries, series.data, by = "date", copy = FALSE)
}
}
save(joinseries, file = "joinseries.RData")
} else {
load("joinseries.RData")
}
# Construct i_obs
PriInv =(joinseries$GPDI+joinseries$PCDG)/(joinseries$popindex*joinseries$deflator)
joinseries = cbind(joinseries, "PriInv" = PriInv , "I_obs" = log(PriInv))
I_obs_tb = cbind.data.frame("date" = joinseries$date, "I_obs" =joinseries$I_obs)
I_obs_tb[-1,2] = diff(I_obs_tb[,2])
I_obs_tb = betweendates(DATE1,DATE2,I_obs_tb)
I_obs_tb[,2] = (I_obs_tb[,2] - mean(I_obs_tb[,2]))
# Construct g_obs (government expenditure)
govexp = ((joinseries$GovConExp + joinseries$GovGrossInv + joinseries$GovNetPurNPAss - joinseries$GovConsFixCap)/
(joinseries$popindex*joinseries$deflator))
joinseries = cbind(joinseries, "govexp" = govexp , "g_obs" = log(govexp))
g_obs_tb = cbind.data.frame("date" = joinseries$date, "g_obs" =joinseries$g_obs)
g_obs_tb[-1,2] = diff(g_obs_tb[,2])
g_obs_tb = betweendates(DATE1,DATE2,g_obs_tb)
g_obs_tb[,2] = (g_obs_tb[,2] - mean(g_obs_tb[,2]))
# get capital income
series.data.CI = joinseries$rentalinc+joinseries$CPROFIT+joinseries$interestinc+joinseries$PRI/2
joinseries = cbind(joinseries, "CI" = series.data.CI)
# calculate labor tax rate
tau_w = ((joinseries$IT+joinseries$SIT)/(joinseries$W+joinseries$PRI/2+joinseries$CI))*((joinseries$W+joinseries$PRI/2)/(joinseries$EC+joinseries$PRI/2))+joinseries$CSI/(joinseries$EC+joinseries$PRI/2)
joinseries = cbind(joinseries ,"tau_w" =tau_w , "ln_tau_w" =log(tau_w))
# calculate capital tax rate
tau_k = (joinseries$IT/(joinseries$W + joinseries$PRI/2 + joinseries$CI))*(joinseries$CI/(joinseries$CI + joinseries$PT)) + (joinseries$CT + joinseries$PT)/(joinseries$CI + joinseries$PT)
joinseries = cbind(joinseries ,"tau_k" =tau_k,"ln_tau_k"=log(tau_k) )
# extract taxrate observables
tax_rate_table = joinseries[,c("date","ln_tau_w","ln_tau_k")]
tax_rate_table = betweendates(DATE1,DATE2,tax_rate_table)  #truncation of data series between DATE1 and DATE2
# demeaning the log tax rates (they are the observations in model)
tax_rate_table[,"ln_tau_w"] = tax_rate_table[,"ln_tau_w"] - mean(tax_rate_table[,"ln_tau_w"] )
tax_rate_table[,"ln_tau_k"] = tax_rate_table[,"ln_tau_k"] - mean(tax_rate_table[,"ln_tau_k"] )
# calculate tax_obs (gov tax revenue)
govtaxrev = (joinseries$tau_w*(joinseries$EC + joinseries$PRI/2) + joinseries$tau_k*(joinseries$CI + joinseries$PT))/(joinseries$popindex*joinseries$deflator)
ln_taxrev = log(govtaxrev)
joinseries = cbind(joinseries , "govtaxrev" = govtaxrev,  "tax_obs" =ln_taxrev )
tax_obs = joinseries[, c("date" , "tax_obs")]
tax_obs[-1,2] = diff(tax_obs[,2])
tax_obs = betweendates(DATE1,DATE2,tax_obs) #truncation of data series between DATE1 and DATE2
tax_obs[,2] = (tax_obs[,2] - mean(tax_obs[,2]))
# calculate government transfers
govtrans = (joinseries$CurTransPmt- joinseries$CurTransRpt) +  # net current transfers
(joinseries$CapTransPmt -joinseries$CapTransRpt) +  # net capital transfers
joinseries$subsidies - # sibsidies
(joinseries$CurTaxRpt + joinseries$ConGovSocIns + joinseries$IncRcptAss + joinseries$CurSurpGovEntp  - joinseries$govtaxrev) # tax residual
joinseries = cbind(joinseries , "govtrans" = govtrans , "ln_real_pc_govtrans" = log(govtrans/(joinseries$popindex*joinseries$deflator)))
# Then calculates b_obs (government debts)
# (this is a problematic section)
govdebts = ((joinseries$govexp + joinseries$govtrans - joinseries$govtaxrev + joinseries$IntPmt)/
(joinseries$popindex*joinseries$deflator))
joinseries = cbind(joinseries , "govdebts" = govdebts, "b_obs" = log(govdebts))
b_obs_tb = joinseries[, c("date" , "govdebts")]
#b_obs_tb[, "govdebts"] = b_obs_tb[, "govdebts"] -b_obs_tb[1, "govdebts"] + 263944*1000000
b_obs_tb[, "govdebts"] = log(b_obs_tb[, "govdebts"] )
b_obs_tb[-1,2] = diff(b_obs_tb[,2])
b_obs_tb = betweendates(DATE1,DATE2,b_obs_tb) #truncation of data series between DATE1 and DATE2
b_obs_tb[,2] = (b_obs_tb[,2] - mean(b_obs_tb[,2]))
## --- parepare raw data---------------
scriptloc = dirname(rstudioapi::getSourceEditorContext()$path)
#Generate vector of dates
years = 1955:2012
quarters = c("Q1","Q2","Q3","Q4")
quarterlydates= vector()
for (ii in years) {
for (kk in quarters) {
quadates = paste0(ii,kk)
quarterlydates = c(quarterlydates,quadates)
}
}
quarterlydates = quarterlydates[-c((length(quarterlydates)-1):length(quarterlydates))]
data0812 = readMat(paste0(scriptloc,"/data0812.mat"))
data0812 = data0812[[1]]
data0812 = as.data.frame(cbind(data0812, "Quater" =quarterlydates ))
data0812 = data0812[-c(1: ( which(data0812$Quater == "1959Q3")  -1 ) ),]
## -------------------------------------
# plotting for analysis
plot(joinseries[,"date"],joinseries[,"tau_k"],type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V12),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
plot(joinseries[,"date"],joinseries[,"tau_w"],type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V11),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
save1 = as.numeric(data0812$V11) / joinseries$tau_w
mean(save1)
save1
plot(save1)
save1*joinseries$popindex
save1/joinseries$popindex
save1/joinseries$deflator
save1*joinseries$deflator
mean(save1)
# I first run "data_september2012.m" and then run "obsdata_first_diff2", and save the final observables in "ReplicData"
ReplicData = readMat(paste0(scriptloc,"/ReplicData.mat"))
# Append the data in ReplicData to the corresponding dataframes
tax_obs = cbind(tax_obs ,"Orig_tax_obs" = ReplicData[["tax.obs"]] )
tax_rate_table = cbind(tax_rate_table, "Orig_tau_k" = ReplicData[["tau.k"]], "Orig_tau_w" = ReplicData[["tau.w"]])
g_obs_tb = cbind(g_obs_tb, "Orig_g_obs" = ReplicData[["g.obs"]])
b_obs_tb = cbind(b_obs_tb, "Orig_b_obs" = ReplicData[["b.obs"]])
I_obs_tb = cbind(I_obs_tb, "Orig_I_obs" = ReplicData[["I.obs"]])
## For tau_w
plot(tax_rate_table[,"date"],tax_rate_table[,"ln_tau_w"],type="l",col="black",ylab="", xlab="date", ylim=c(-0.09,0.1))
lines(tax_rate_table[,"date"],tax_rate_table[,"Orig_tau_w"],col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
## For tau_k
plot(tax_rate_table[,"date"],tax_rate_table[,"ln_tau_k"],type="l",col="black",ylab="", xlab="date")
lines(tax_rate_table[,"date"],tax_rate_table[,"Orig_tau_k"],col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
save1 = as.numeric(data0812$V12) / joinseries$tau_k
save1
mean(save1)
# plotting for analysis
plot(joinseries[,"date"],joinseries[,"tau_k"]*0.62,type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V12),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
plot(joinseries[,"date"],joinseries[,"tax_obs"]*100,type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V10),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
rm(list = ls())
gen_data =1  # if 1, retrieve data from alfred
trytry = 0
# install.packages(c("fredr","writexl","dplyr","readxl","R.matlab"))
library(fredr)
library(writexl)
library(dplyr)
library(readxl)
library(R.matlab)
scriptloc = dirname(rstudioapi::getSourceEditorContext()$path)
fredr_set_key("52191461124b452b055bc68a63d07928")  #set alfred access key
ref.vin.date <- as.Date("2012-10-10")  # vintage date as reference
source("UtilityFunctions.R")   # self define functions
DATE1 <- as.Date("1983-01-01") # 1983Q1
DATE2 <- as.Date("2008-08-30")  # 2008Q3
datalist <- list() #initiate list to store data
## -- retrieve data from ALFRED -----------
# Define vector of series to be retrieved and their respective column names
DataCodeVec <- c("PCND"  , "PCESV" ,
"GPDI", "PCDG" , "A957RC1Q027SBEA" , "A787RC1Q027SBEA" , "AD08RC1Q027SBEA" , "A918RC1Q027SBEA",
"W780RC1Q027SBEA","COE", "A074RC1Q027SBEA", "W071RC1Q027SBEA", "PROPINC", "WASCUR",
"RENTIN", "CPROFIT",
"W255RC1Q027SBEA", #"BOGZ1FA086130003Q"
"B075RC1Q027SBEA", "B249RC1Q027SBEA", "CNP16OV",
"GDPCTPI" ,
"W014RC1Q027SBEA", #"W014RC1Q027SBEA" ,
"W011RC1Q027SBEA" ,"W020RC1Q027SBEA" ,"B232RC1Q027SBEA", "W006RC1Q027SBEA",
"W780RC1Q027SBEA","W009RC1Q027SBEA","B097RC1Q027SBEA" , "B096RC1Q027SBEA", "A091RC1Q027SBEA")
DataNameVec <- c("PCND" , "PCESV" ,
"GPDI" , "PCDG", "GovConExp" , "GovGrossInv" , "GovNetPurNPAss" , "GovConsFixCap" ,
"CSI","EC", "IT", "SIT", "PRI" ,"W" ,
"rentalinc", "CPROFIT",
"interestinc"  ##
,"CT", "PT" ,"popindex" ,
"deflator" ,
"CurTransPmt" , ##
"CurTransRpt" , "CapTransPmt" ,"CapTransRpt","CurTaxRpt",
"ConGovSocIns","IncRcptAss","CurSurpGovEntp" , "subsidies" , "IntPmt")
# cater for unit difference!! Everything should be in Billions!
# below vector is of other units
InMillions <- c("BOGZ1FA086130003Q")
check_vec <- cbind("name" =DataNameVec, "code" =DataCodeVec  )
if (gen_data ==1){
# data retrival
for (iii in 1:length(DataCodeVec)){
CodeName= DataCodeVec[iii]
# raw data retrival from ALFRED
tmp.vindates<- as.Date(fredr_series_vintagedates(series_id = CodeName)[[1]])
closest_date <- clost_vin_search(tmp.vindates, ref.vin.date )
series.data <- as.data.frame(fredr_series_observations(series_id = CodeName, frequency = "q", vintage_dates = closest_date))
series.data$date <- as.Date(series.data$date)
# Indexation of population and nominalization of deflator
if (CodeName == "CNP16OV") {
series.data[, "value"] = series.data[, "value"]/series.data[series.data$date == "2005-10-01","value"]
} else if ( CodeName == "GDPCTPI") {
series.data[, "value"] = series.data[, "value"]*100/series.data[series.data$date == "2005-10-01","value"]
} else {}
# change units to billion
if (CodeName == "BOGZ1FA086130003Q") {
series.data[, "value"] =  series.data[, "value"]/1000
}
# renaming
series.data = series.data[, c("date", "value")]
names(series.data)[names(series.data) == "value"] <- DataNameVec[iii]
series.data = series.data[,!(names(series.data) %in% "series_id")]
# append to joint dataframe
if (iii==1 ) {
joinseries = series.data
} else {
joinseries=inner_join(joinseries, series.data, by = "date", copy = FALSE)
}
}
save(joinseries, file = "joinseries.RData")
} else {
load("joinseries.RData")
}
if (trytry == 1) {
series.data6 <- as.data.frame(read_excel("CSI_tab3_2_ln11.xls",sheet = "Tabelle1"))
joinseries$CSI = as.vector(series.data6[,1])  # improves
series.data6 <- as.data.frame(read_excel("PT_tab3_3.xls",sheet = "Tabelle1"))
joinseries$PT = as.vector(series.data6[,1])  #improves
#series.data6 <- as.data.frame(read_excel("table3_2_line_7.xls",sheet = "Tabelle1"))
#joinseries$CT = as.vector(series.data6[,1])  # not improve
series.data6 <- as.data.frame(read_excel("subsidies_tab3_2_ln32.xls",sheet = "Tabelle1"))
joinseries$subsidies = as.vector(series.data6[,1])
}
## --- Observables constructions according to online Appendix-----------
# construct c_
# Construct i_obs
PriInv =(joinseries$GPDI+joinseries$PCDG)/(joinseries$popindex*joinseries$deflator)
joinseries = cbind(joinseries, "PriInv" = PriInv , "I_obs" = log(PriInv))
I_obs_tb = cbind.data.frame("date" = joinseries$date, "I_obs" =joinseries$I_obs)
I_obs_tb[-1,2] = diff(I_obs_tb[,2])
I_obs_tb = betweendates(DATE1,DATE2,I_obs_tb)
I_obs_tb[,2] = (I_obs_tb[,2] - mean(I_obs_tb[,2]))
# Construct g_obs (government expenditure)
govexp = ((joinseries$GovConExp + joinseries$GovGrossInv + joinseries$GovNetPurNPAss - joinseries$GovConsFixCap)/
(joinseries$popindex*joinseries$deflator))
joinseries = cbind(joinseries, "govexp" = govexp , "g_obs" = log(govexp))
g_obs_tb = cbind.data.frame("date" = joinseries$date, "g_obs" =joinseries$g_obs)
g_obs_tb[-1,2] = diff(g_obs_tb[,2])
g_obs_tb = betweendates(DATE1,DATE2,g_obs_tb)
g_obs_tb[,2] = (g_obs_tb[,2] - mean(g_obs_tb[,2]))
# get capital income
series.data.CI = joinseries$rentalinc+joinseries$CPROFIT+joinseries$interestinc+joinseries$PRI/2
joinseries = cbind(joinseries, "CI" = series.data.CI)
# calculate labor tax rate
tau_w = ((joinseries$IT+joinseries$SIT)/(joinseries$W+joinseries$PRI/2+joinseries$CI))*((joinseries$W+joinseries$PRI/2)/(joinseries$EC+joinseries$PRI/2))+joinseries$CSI/(joinseries$EC+joinseries$PRI/2)
tau_w = 0.9*tau_w
joinseries = cbind(joinseries ,"tau_w" =tau_w , "ln_tau_w" =log(tau_w))
# calculate capital tax rate
tau_k = (joinseries$IT/(joinseries$W + joinseries$PRI/2 + joinseries$CI))*(joinseries$CI/(joinseries$CI + joinseries$PT)) + (joinseries$CT + joinseries$PT)/(joinseries$CI + joinseries$PT)
tau_k = 0.62*tau_k
joinseries = cbind(joinseries ,"tau_k" =tau_k,"ln_tau_k"=log(tau_k) )
# extract taxrate observables
tax_rate_table = joinseries[,c("date","ln_tau_w","ln_tau_k")]
tax_rate_table = betweendates(DATE1,DATE2,tax_rate_table)  #truncation of data series between DATE1 and DATE2
# demeaning the log tax rates (they are the observations in model)
tax_rate_table[,"ln_tau_w"] = tax_rate_table[,"ln_tau_w"] - mean(tax_rate_table[,"ln_tau_w"] )
tax_rate_table[,"ln_tau_k"] = tax_rate_table[,"ln_tau_k"] - mean(tax_rate_table[,"ln_tau_k"] )
# calculate tax_obs (gov tax revenue)
govtaxrev = (joinseries$tau_w*(joinseries$EC + joinseries$PRI/2) + joinseries$tau_k*(joinseries$CI + joinseries$PT))/(joinseries$popindex*joinseries$deflator)
ln_taxrev = log(govtaxrev)
joinseries = cbind(joinseries , "govtaxrev" = govtaxrev,  "tax_obs" =ln_taxrev )
tax_obs = joinseries[, c("date" , "tax_obs")]
tax_obs[-1,2] = diff(tax_obs[,2])
tax_obs = betweendates(DATE1,DATE2,tax_obs) #truncation of data series between DATE1 and DATE2
tax_obs[,2] = (tax_obs[,2] - mean(tax_obs[,2]))
# calculate government transfers
govtrans = (joinseries$CurTransPmt- joinseries$CurTransRpt) +  # net current transfers
(joinseries$CapTransPmt -joinseries$CapTransRpt) +  # net capital transfers
joinseries$subsidies - # sibsidies
(joinseries$CurTaxRpt + joinseries$ConGovSocIns + joinseries$IncRcptAss + joinseries$CurSurpGovEntp  - joinseries$govtaxrev) # tax residual
joinseries = cbind(joinseries , "govtrans" = govtrans , "ln_real_pc_govtrans" = log(govtrans/(joinseries$popindex*joinseries$deflator)))
# Then calculates b_obs (government debts)
# (this is a problematic section)
govdebts = ((joinseries$govexp + joinseries$govtrans - joinseries$govtaxrev + joinseries$IntPmt)/
(joinseries$popindex*joinseries$deflator))
joinseries = cbind(joinseries , "govdebts" = govdebts, "b_obs" = log(govdebts))
b_obs_tb = joinseries[, c("date" , "govdebts")]
#b_obs_tb[, "govdebts"] = b_obs_tb[, "govdebts"] -b_obs_tb[1, "govdebts"] + 263944*1000000
b_obs_tb[, "govdebts"] = log(b_obs_tb[, "govdebts"] )
b_obs_tb[-1,2] = diff(b_obs_tb[,2])
b_obs_tb = betweendates(DATE1,DATE2,b_obs_tb) #truncation of data series between DATE1 and DATE2
b_obs_tb[,2] = (b_obs_tb[,2] - mean(b_obs_tb[,2]))
# I first run "data_september2012.m" and then run "obsdata_first_diff2", and save the final observables in "ReplicData"
ReplicData = readMat(paste0(scriptloc,"/ReplicData.mat"))
# Append the data in ReplicData to the corresponding dataframes
tax_obs = cbind(tax_obs ,"Orig_tax_obs" = ReplicData[["tax.obs"]] )
tax_rate_table = cbind(tax_rate_table, "Orig_tau_k" = ReplicData[["tau.k"]], "Orig_tau_w" = ReplicData[["tau.w"]])
g_obs_tb = cbind(g_obs_tb, "Orig_g_obs" = ReplicData[["g.obs"]])
b_obs_tb = cbind(b_obs_tb, "Orig_b_obs" = ReplicData[["b.obs"]])
I_obs_tb = cbind(I_obs_tb, "Orig_I_obs" = ReplicData[["I.obs"]])
## For tau_w
plot(tax_rate_table[,"date"],tax_rate_table[,"ln_tau_w"],type="l",col="black",ylab="", xlab="date", ylim=c(-0.09,0.1))
lines(tax_rate_table[,"date"],tax_rate_table[,"Orig_tau_w"],col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
## For tau_k
plot(tax_rate_table[,"date"],tax_rate_table[,"ln_tau_k"],type="l",col="black",ylab="", xlab="date")
lines(tax_rate_table[,"date"],tax_rate_table[,"Orig_tau_k"],col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
## For tax_obs
plot(tax_obs[,"date"],tax_obs[,"tax_obs"],type="l",col="black" ,ylab="", xlab="date")
lines(tax_obs[,"date"],tax_obs[,"Orig_tax_obs"],col="red")
legend("bottomleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
## --- parepare raw data---------------
scriptloc = dirname(rstudioapi::getSourceEditorContext()$path)
#Generate vector of dates
years = 1955:2012
quarters = c("Q1","Q2","Q3","Q4")
quarterlydates= vector()
for (ii in years) {
for (kk in quarters) {
quadates = paste0(ii,kk)
quarterlydates = c(quarterlydates,quadates)
}
}
quarterlydates = quarterlydates[-c((length(quarterlydates)-1):length(quarterlydates))]
data0812 = readMat(paste0(scriptloc,"/data0812.mat"))
data0812 = data0812[[1]]
data0812 = as.data.frame(cbind(data0812, "Quater" =quarterlydates ))
data0812 = data0812[-c(1: ( which(data0812$Quater == "1959Q3")  -1 ) ),]
## -------------------------------------
plot(joinseries[,"date"],joinseries[,"tax_obs"]*100,type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V10),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
# plotting for analysis
plot(joinseries[,"date"],joinseries[,"tau_k"]*0.62,type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V12),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
# plotting for analysis
plot(joinseries[,"date"],joinseries[,"tau_k"],type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V12),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
plot(joinseries[,"date"],joinseries[,"tau_w"],type="l",col="black",ylab="", xlab="date")
lines(joinseries[,"date"],as.numeric(data0812$V11),col="red")
legend("topleft", legend = c("replicated", "original"), col=c("black", "red"),lty=1, pch=NA)
